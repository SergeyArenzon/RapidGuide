apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Chart.Name }}
  labels:
    app: {{ .Chart.Name }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Chart.Name }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 25%
  template:
    metadata:
      labels:
        app: {{ .Chart.Name }}
    spec:
      {{- if .Values.initContainers }}
      initContainers:
        {{- toYaml .Values.initContainers | nindent 8 }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: auth
              containerPort: {{ .Values.service.port }}
          env:
            - name: PORT
              value: {{ .Values.service.port | quote }}
            - name: JWT_MAX_AGE
              valueFrom:
                configMapKeyRef:
                  name: auth-config
                  key: JWT_MAX_AGE
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secrets.global.name }}
                  key: jwt-secret
            - name: JWT_ACCESS_EXPIRES_IN_MS
              valueFrom:
                configMapKeyRef:
                  name: auth-config
                  key: JWT_ACCESS_EXPIRES_IN_MS
            - name: JWT_REFRESH_EXPIRES_IN_MS
              valueFrom:
                configMapKeyRef:
                  name: auth-config
                  key: JWT_REFRESH_EXPIRES_IN_MS
            - name: REDIS_HOST
              valueFrom:
                configMapKeyRef:
                  name: global-config
                  key: redis-host
            - name: REDIS_PORT
              valueFrom:
                configMapKeyRef:
                  name: global-config
                  key: redis-port
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.secrets.global.name }}
                  key: redis-password
            - name: REDIS_DB
              valueFrom:
                configMapKeyRef:
                  name: global-config
                  key: redis-db
          resources:
            limits:
              cpu: {{ .Values.resources.limits.cpu }}
              memory: {{ .Values.resources.limits.memory }}
            requests:
              cpu: {{ .Values.resources.requests.cpu }}
              memory: {{ .Values.resources.requests.memory }}
          readinessProbe:
            httpGet:
              path: /health
              port: {{ .Values.service.port }}
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /health
              port: {{ .Values.service.port }}
            initialDelaySeconds: 15
            periodSeconds: 20 